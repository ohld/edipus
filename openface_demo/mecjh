    
    parser = argparse.ArgumentParser()
    parser.add_argument('inputDir'           , type=str,      help="Input image directory.",         default=os.path.join(fileDir, user_list))
    parser.add_argument('--dlibFacePredictor', type=str,      help="Path to dlib's face predictor.", default=os.path.join(dlibModelDir, "shape_predictor_68_face_landmarks.dat"))
    subparsers = parser.add_subparsers(dest='mode',           help="Mode")
    computeMeanParser = subparsers.add_parser('computeMean',  help='Compute the image mean of a directory of images.')
    computeMeanParser.add_argument('--numImages', type=int,   help="The number of images. '0' for all images.", default=0)  # <= 0 ===> all imgs
    alignmentParser = subparsers.add_parser('align',          help='Align a directory of images.')
    alignmentParser.add_argument('landmarks', type=str,choices=['outerEyesAndNose',
                                                                'innerEyesAndBottomLip',
                                                                'eyes_1'],
                                                               help='The landmarks to align to.', default="outerEyesAndNose")
    alignmentParser.add_argument('outputDir',     type=str,    help="Output directory of aligned images.", default="./aligned-images/")
    x = os.path.join(fileDir,"aligned-images/")
    alignmentParser.add_argument('--size',        type=int,    help="Default image size.", default=96)
    alignmentParser.add_argument('--fallbackLfw', type=str,    help="If alignment doesn't work, fallback to copying the deep funneled version from this directory..")
    alignmentParser.add_argument('--skipMulti', action='store_true', help="Skip images with more than one face.")
    alignmentParser.add_argument('--verbose', action='store_true')
    args = parser.parse_args()

    """
        parser = argparse.ArgumentParser()
        parser.add_argument('--dlibFacePredictor', type=str, help="Path to dlib's face predictor.", default=os.path.join(dlibModelDir, "shape_predictor_68_face_landmarks.dat"))
        parser.add_argument('--networkModel', type=str, help="Path to Torch network model.", default=os.path.join(openfaceModelDir, 'nn4.small2.v1.t7'))
        parser.add_argument('--imgDim', type=int, help="Default image dimension.", default=96)
        parser.add_argument('--cuda', action='store_true')
        parser.add_argument('--unknown', type=bool, default=False, help='Try to predict unknown people')

        args = parser.parse_args()

        align = openface.AlignDlib(args.dlibFacePredictor)
        net = openface.TorchNeuralNet(args.networkModel, imgDim=args.imgDim, cuda=args.cuda)
    """
